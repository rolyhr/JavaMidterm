***ANSWER ALL QUESTIONS BELOW***

What is a programming language?
Answer: programming language is used to develop software programs, scripts, or other sets of
        instructions for computers to execute. There are different types of programming language
        such as Procedural, Functional, Scripting, OOP & more.

What is a JDK composed of? Define each component?
Answer: JDK allows developers to create Java programs that can be executed and run by the JVM and JRE.
        JDK is composed of Java Runtime Environment (JRE), interpreter/loader, compiler, archiver (jar)
        and many more.
        JRE: A JRE is part of a Java development kit (JDK). JRE is made up of a Java virtual machine (JVM),
             Java class libraries, and the Java class loader.
        Compiler: Compiler is a program that takes the source code (.java) and compiles it
                  into a platform-independent Java file.
        JDM: Components of JVM in Java:
                    - ClassLoader
                    - Execution Engine

What is an IDE?
Answer: IDE stands for Integrated Development Environment. IDE is a software used for building
        applications where developer can write source code and connect different dependencies & API
        to build a complete functional application.

What are some of the most popular Java IDEs available in the market?
Answer: IntelliJ IDEA, PyCharm, Eclipse, Atom, XCode, NetBeans and more.

Explain the entire java life cycle.
Answer: Developer writes code in the code editor also known as IDE.  To write any code, first developer
        create .java files which is basically the class. Java has a built-in compiler. It will take the
        source codes and convert it to byte-code, which is machine-readable code. Then it passes through
        the JVM > load the class > verify the byte-code, to make sure all the codes are correct > then,
        interpret to your operating system.

What is a class?
Answer: A class is a blueprint. Every class has States & Behaviors.

What is an object?
Answer: An Object has states and behavior. States are stored in fields & methods display object's
        behavior.

What is the entry point of an application?
Answer: Main method is the entry point of a Java application.

Why is the main() static?
Answer: Main method is always static, because compiler would be able to call the main method without
        creating an object the class.

Which class is the superclass of all classes?
Answer: Object

What is difference between path and classpath variables?
Answer: Path is an environment variable that is used to locate JDK to run java program and compile the
        source file. Classpath is an environment variable is used by class loader to locate and load
        bytecodes stored in the .class file.

What is the difference between an Interface and Abstract class?
Answer: Abstraction is hiding method implementation. You create an abstract method by using the keyword
        abstract, but you do not implement the body. The way you implement the body by using a child class
        to override the method. Abstract method is meant to be overridden by child class. An abstract
        class can also contain non-abstract methods. This is why abstract classes are not 100% abstract.

        Interface are 100% abstract by default. We cannot create objects of interfaces just like abstract
        classes. All methods within an interface MUST be abstract. All variables within an interface are
        implicitly FINAL (constant).

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: You cannot instantiate an Interface or an Abstract class because it is not complete. There are
        methods that needs to be implemented by a child class using the override concept.

What is Access Modifier?
Answer: Access Modifiers allow us to restrict access to members of a class.
        public - global access, can be access by any class or package.
        protected - confined within the same package. Any class within the same package can access.
        private - only accessible within the same class.

What is OOP? Define each OOP concept.
Answer: OOP stands for Object-oriented programming. OOP helps to organize various objects. There are
        4 main Object-Oriented Programming Concepts:
                Encapsulation: Data hiding
                Polymorphism: Ability to change/adapt functionality
                Abstraction: Hiding implementation of method
                Inheritance: Extending states/behaviors to other classes.

What is Java Package and which package is imported by default?
Answer:

What is an API? List some API's that you have used so far.
Answer:

Does java support multiple inheritance? Why or why not?
Answer:

What is method overloading and when does it happen?
Answer:

Explain exceptions in java and how to handle them.
Answer:

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: